Cloud Storage LAB ----------------------------------------





Task 1: Preparation

Create a Cloud Storage bucket :

gsutil mb gs://coral-antonym-289021


Download a sample file using CURL and make two copies :

export BUCKET_NAME_1=coral-antonym-289021

echo $BUCKET_NAME_1

curl http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/ClusterSetup.html > setup.html

cp setup.html setup2.html
cp setup.html setup3.html






Task 2: Access control lists (ACLs) :


Copy the file to the bucket and configure the access control list :

gsutil cp setup.html gs://$BUCKET_NAME_1/

gsutil acl get gs://$BUCKET_NAME_1/setup.html  > acl.txt
cat acl.txt

gsutil acl set private gs://$BUCKET_NAME_1/setup.html
gsutil acl get gs://$BUCKET_NAME_1/setup.html  > acl2.txt
cat acl2.txt

gsutil acl ch -u AllUsers:R gs://$BUCKET_NAME_1/setup.html
gsutil acl get gs://$BUCKET_NAME_1/setup.html  > acl3.txt
cat acl3.txt


Delete the local file and copy back from Cloud Storage :

rm setup.html

ls

gsutil cp gs://$BUCKET_NAME_1/setup.html setup.html







Task 3: Customer-supplied encryption keys (CSEK) :


Generate a CSEK key :

string=`python3 -c 'import base64; import os; print(base64.encodebytes(os.urandom(32)))'`

echo ${string:2:-3} > key

gsutil config -n

#echo encryption_key=$key >> .boto
sed -i s/# encryption_key/encryption_key=$key/g .boto


gsutil cp setup2.html gs://$BUCKET_NAME_1/
gsutil cp setup3.html gs://$BUCKET_NAME_1/



Delete local files, copy new files, and verify encryption :

rm setup*

gsutil cp gs://$BUCKET_NAME_1/setup* ./

cat setup.html
cat setup2.html
cat setup3.html






Task 4: Rotate CSEK keys :

sed -i s/encryption_key/#encryption_key/g .boto

sed -i s/# decryption_key1/decryption_key1=$key/g .boto



Generate another CSEK key and add to the boto file :

string2=`python3 -c 'import base64; import os; print(base64.encodebytes(os.urandom(32)))'`

echo ${string2:2:-3} > key2

echo encryption_key=$key2 >> .boto



Rewrite the key for file 1 and comment out the old decrypt key :

gsutil rewrite -k gs://$BUCKET_NAME_1/setup2.html

sed -i s/decryption_key1/# decryption_key1/g .boto



Download setup 2 and setup3 :

gsutil cp  gs://$BUCKET_NAME_1/setup2.html recover2.html

gsutil cp  gs://$BUCKET_NAME_1/setup3.html recover3.html










Task 5: Enable lifecycle management :


View the current lifecycle policy for the bucket : 

gsutil lifecycle get gs://$BUCKET_NAME_1



Create a JSON lifecycle policy file :

cat <<EOF > life.json
{
  "rule":
  [
    {
      "action": {"type": "Delete"},
      "condition": {"age": 31}
    }
  ]
}
EOF


Set the policy and verify :

gsutil lifecycle set life.json gs://$BUCKET_NAME_1

gsutil lifecycle get gs://$BUCKET_NAME_1









Task 6: Enable versioning :


View the versioning status for the bucket and enable versioning :


gsutil versioning get gs://$BUCKET_NAME_1

gsutil versioning set on gs://$BUCKET_NAME_1

gsutil versioning get gs://$BUCKET_NAME_1



Create several versions of the sample file in the bucket :

ls -al setup.html

cp setup.html setup2.html
sed '1,5d' setup2.html > setup.html
rm -f setup2.html

gsutil cp -v setup.html gs://$BUCKET_NAME_1

cp setup.html setup2.html
sed '1,5d' setup2.html > setup.html
rm -f setup2.html

gsutil cp -v setup.html gs://$BUCKET_NAME_1




List all versions of the file :

gsutil ls -a gs://$BUCKET_NAME_1/setup.html

export VERSION_NAME=<Enter VERSION name here>

echo $VERSION_NAME




Download the oldest, original version of the file and verify recovery :

gsutil cp $VERSION_NAME recovered.txt

ls -al setup.html

ls -al recovered.txt










Task 7: Synchronize a directory to a bucket :


Make a nested directory and sync with a bucket :

mkdir firstlevel
mkdir ./firstlevel/secondlevel
cp setup.html firstlevel
cp setup.html firstlevel/secondlevel


gsutil rsync -r ./firstlevel gs://$BUCKET_NAME_1/firstlevel






